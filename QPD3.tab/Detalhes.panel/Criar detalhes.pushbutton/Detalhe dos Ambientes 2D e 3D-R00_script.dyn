{
  "Uuid": "ca9bf69e-6969-48b2-b9b2-2363d3cb36be",
  "IsCustomNode": false,
  "Description": "",
  "Name": "Detalhe dos Ambientes 2D e 3D - Iron Python - 2",
  "ElementResolver": {
    "ResolutionMap": {
      "Autodesk.BoundingBox": {
        "Key": "Autodesk.DesignScript.Geometry.BoundingBox",
        "Value": "ProtoGeometry.dll"
      },
      "Autodesk.DesignScript.Geometry.BoundingBox": {
        "Key": "Autodesk.DesignScript.Geometry.BoundingBox",
        "Value": "ProtoGeometry.dll"
      },
      "Point": {
        "Key": "Autodesk.DesignScript.Geometry.Point",
        "Value": "ProtoGeometry.dll"
      },
      "DSCore.Object": {
        "Key": "DSCore.Object",
        "Value": "DSCoreNodes.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Application.Document.ActiveView",
      "Id": "9851b7861a2d40deb82828866c1b3acb",
      "Inputs": [
        {
          "Id": "3c83ad361c6e40539e3669c82efabb6c",
          "Name": "document",
          "Description": "Revit.Application.Document",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ca1cb63dd9cc4247a1f8181622b37938",
          "Name": "View",
          "Description": "View",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obter a vista ativa para o documento\n\nDocument.ActiveView: View"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Application.Document.Current",
      "Id": "d39979e15470473f844dc0fb3b9aac9b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9eda8b97fc304d00b95db1af12ee8551",
          "Name": "Document",
          "Description": "Document",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obter o documento atual\n\nDocument.Current: Document"
    },
    {
      "ConcreteType": "CoreNodeModels.HigherOrder.ApplyFunction, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "b3fffa959a454993b4b70b772010bf25",
      "Inputs": [
        {
          "Id": "861c3039caf84bd589a5377eb8fd4a0d",
          "Name": "function",
          "Description": "Function to apply.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b5c17784cfc44bd7ad970dd619c8ad2b",
          "Name": "argument0",
          "Description": "Argument #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "eb87859f2e2d4587955e184457e38b15",
          "Name": "result",
          "Description": "Result of application.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Retorna o resultado de uma função com argumentos fornecidos. Por exemplo: argumentos de um ponto e vetor são aplicados a uma função de tradução retornando um ponto traduzido."
    },
    {
      "ConcreteType": "CoreNodeModels.HigherOrder.ComposeFunctions, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "67628969b1b3442f9b5e16ca5ad90793",
      "Inputs": [
        {
          "Id": "8fe9a423d4ea4651946229192e5167cb",
          "Name": "function0",
          "Description": "Function #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9fa4316f867c433cac73c15aee24d5e6",
          "Name": "function1",
          "Description": "Function #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "149f1e39e0d7405081ed1fe19f6d4670",
          "Name": "function",
          "Description": "Composed function.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Retorna uma única função de várias funções. Por exemplo: as funções módulo e divisão são compostas em uma única função para aplicar a uma lista."
    },
    {
      "ConcreteType": "CoreNodeModels.HigherOrder.ApplyFunction, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "f2ccce1594dd471f90c5f1c65d04d893",
      "Inputs": [
        {
          "Id": "ec87de8252864dacaeea298a4996e607",
          "Name": "function",
          "Description": "Function to apply.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5ff39c105a174a46aab1c037926c6f82",
          "Name": "argument0",
          "Description": "Argument #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0d178b0d42de494b8fa629b60fa63f66",
          "Name": "result",
          "Description": "Result of application.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Retorna o resultado de uma função com argumentos fornecidos. Por exemplo: argumentos de um ponto e vetor são aplicados a uma função de tradução retornando um ponto traduzido."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.SortByKey@var[]..[],var[]..[]",
      "Id": "12b84a13acd3414b88fb109c3e650204",
      "Inputs": [
        {
          "Id": "ce384214813c410b8e061c79b71c47f0",
          "Name": "list",
          "Description": "lista a ser classificada\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "a9feb702603b4bd390eabedef20ab803",
          "Name": "keys",
          "Description": "lista de chaves, as chaves devem ser classificáveis (por exemplo, números, strings)\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f988d26de2be43f9b59a52f74159cf1f",
          "Name": "sortedList",
          "Description": "tipo: var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ba78b42e91ee449b9bf2862f2fcfc3ce",
          "Name": "sortedKeys",
          "Description": "tipo: var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Classificar a lista com base em suas chaves\n\nList.SortByKey (list: var[]..[], keys: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Curve.Length",
      "Id": "de645b771c9d4ed4a5cff704453c3998",
      "Inputs": [
        {
          "Id": "5bb80a0579624e3a921201db3fb85ebe",
          "Name": "curve",
          "Description": "Autodesk.DesignScript.Geometry.Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5a4368e17de1467f8b38a71e7fff8234",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Retorna o comprimento total do arco da curva\n\nCurve.Length: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.LastItem@var[]..[]",
      "Id": "f24c90f145d0446ab7bc5926348b7095",
      "Inputs": [
        {
          "Id": "671d8e1c7c9f4752a1e7d99fd264caa0",
          "Name": "list",
          "Description": "Lista da qual obter o último item\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2b78624c35e3425b869007152c38912b",
          "Name": "item",
          "Description": "Último item na lista",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Recupera o último item em uma lista.\n\nList.LastItem (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport sys\r\nimport System\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitAPIUI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.UI import *\r\n\r\nimport math \r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nuidoc = uiapp.ActiveUIDocument\r\n\r\ndef toList(x):\r\n    if isinstance(x, list):\r\n        return x\r\n    else:\r\n        return [x]\r\n        \r\n# Função para obter o template de visualização pelo nome\r\ndef get_view_template_by_name(doc, template_name):\r\n    collector = FilteredElementCollector(doc).OfClass(View)\r\n    for view in collector:\r\n        if view.IsTemplate and view.Name == template_name:\r\n            return view.Id       \r\n\r\ntoggle = IN[0]\r\nviewNames = toList(IN[1])\r\nbbBoxes = toList(IN[2])\r\nheight = IN[3]\r\nnormals = IN[4]\r\nview_template = IN[5]\r\n\r\nif toggle:\r\n    # Obter o ViewFamilyType de 3DView\r\n    collector = FilteredElementCollector(doc).OfClass(ViewFamilyType)\r\n    for i in collector:\r\n        viewFamily = i.ViewFamily\r\n        if viewFamily == ViewFamily.ThreeDimensional:\r\n            viewFamilyType = i\r\n    \r\n    # Criar as vistas 3D a partir das BB e dos nomes\r\n    warning = []\r\n    newViews = []\r\n    for viewName, bbBox,normal in zip(viewNames, bbBoxes,normals):\r\n        bb = UnwrapElement(bbBox)\r\n        bbMax = bb.MaxPoint.ToRevitType()\r\n        bbMin = bb.MinPoint.ToRevitType()\r\n        newBB = BoundingBoxXYZ()\r\n        \r\n        bbMin_X = bbMin.X\r\n        bbMin_Y = bbMin.Y\r\n        bbMin_Z = bbMin.Z + UnitUtils.ConvertToInternalUnits(height[1], UnitTypeId.Centimeters) \r\n        newBBmin = XYZ(bbMin_X, bbMin_Y, bbMin_Z)\r\n        \r\n        bbMax_X = bbMax.X\r\n        bbMax_Y = bbMax.Y\r\n        bbMax_Z = bbMax.Z + UnitUtils.ConvertToInternalUnits(height[0], UnitTypeId.Centimeters)\r\n        newBBmax = XYZ(bbMax_X, bbMax_Y, bbMax_Z)\r\n        \r\n        newBB.Max = newBBmax\r\n        newBB.Min = newBBmin \r\n        \r\n        # Rotacionar a SectionBox para coincidir com o detalhe\r\n        norm = normal.ToRevitType()\r\n        boxNormal = newBB.Transform.BasisX.Normalize()\r\n        angle = norm.AngleTo(boxNormal)\r\n        axis = XYZ(0, 0, 1.0)\r\n        origin = XYZ(newBB.Min.X + (newBB.Max.X - newBB.Min.X) / 2, newBB.Min.Y + (newBB.Max.Y - newBB.Min.Y) / 2, 0.0)\r\n        \r\n        if norm.Y * boxNormal.X < 0:\r\n            rotate = Transform.CreateRotationAtPoint(axis, math.pi / 2 - angle, origin)\r\n        else:\r\n            rotate = Transform.CreateRotationAtPoint(axis, angle, origin)\r\n        \r\n        newBB.Transform = newBB.Transform.Multiply(rotate)\r\n        \r\n        try:\r\n            TransactionManager.Instance.EnsureInTransaction(doc)\r\n            newView = View3D.CreateIsometric(doc, viewFamilyType.Id)\r\n            newView.Name = viewName\r\n            newView.SetSectionBox(newBB)\r\n            newView.ViewTemplateId = get_view_template_by_name(doc,view_template)\r\n            TransactionManager.Instance.TransactionTaskDone()\r\n            newViews.append(newView)\r\n        \r\n        except Exception as ex:\r\n            warning.append(str(ex))\r\n            \r\n    if len(newViews) > 1:\r\n        newViews.sort(key=lambda v: v.get_Parameter(BuiltInParameter.VIEW_NAME).AsString())\r\n        \r\n        \r\n    OUT = newViews\r\n\r\nelse:\r\n    OUT = \"Toggle is off\"\r\n",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "df1c14291dd447659af64dccfe07f7f9",
      "Inputs": [
        {
          "Id": "6cbbcafbc3694170a2035e2faf0d1e2c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a179a33eac9141c98868a83793529cf2",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0de2016e1c4548eab7c822b469f6e79e",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b42512943e4140e8ae97890a45e3ae66",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "18d4746b23064653bbbb3d5dcd72e2b8",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b3ebeb8a61e7457c864fd2728d348f6f",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7c5448bb856c4b9199f76ea747bbb00a",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.PolyCurve.ByJoinedCurves@Autodesk.DesignScript.Geometry.Curve[],double,bool,double",
      "Id": "8cda16dddc9440108b4c74be6c1937bb",
      "Inputs": [
        {
          "Id": "3aafa59bcf1c4b1b99657234e06f2ab6",
          "Name": "curves",
          "Description": "Curvas a unir na PolyCurve\n\nCurve[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1652d83c3d874959b56935de50323c77",
          "Name": "joinTolerance",
          "Description": "Tolerância para determinar o tamanho permitido da lacuna entre curvas a unir\n\ndouble\nValor padrão : 0.001",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a99e718245c9433393449f14d1a346eb",
          "Name": "trimCurves",
          "Description": "bool\nValor padrão : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7240897166b849bdbf9e4e9a2da6d97f",
          "Name": "trimLength",
          "Description": "double\nValor padrão : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "60a9a88fd9714a9aac82e608edc8282c",
          "Name": "PolyCurve",
          "Description": "PolyCurve criada usando curvas unidas",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Crie a PolyCurve unindo curvas. Inverte a curva conforme necessário para a conectividade. Escolha uma tolerância de união preferencial entre as unidades 1e-6 e 1e-3.\n\nPolyCurve.ByJoinedCurves (curves: Curve[], joinTolerance: double = 0.001, trimCurves: bool = false, trimLength: double = 0): PolyCurve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.BoundingBox.ByGeometry@Autodesk.DesignScript.Geometry.Geometry[]",
      "Id": "f326af310e49495391ac482d2ae09a4a",
      "Inputs": [
        {
          "Id": "7175f5c74d9f4226bbe290c00bac3cf2",
          "Name": "geom",
          "Description": "Geometry[]",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4827eb5a910b4bfdaa7f903b14ad3a77",
          "Name": "BoundingBox",
          "Description": "BoundingBox",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Crie uma BoundingBox alinhada com o eixo em torno de geometria de entrada.\n\nBoundingBox.ByGeometry (geom: Geometry[]): BoundingBox"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Curve.NormalAtParameter@double",
      "Id": "5d97052d4bca4c2fb1b8d2482e45bb5f",
      "Inputs": [
        {
          "Id": "00571b5d6ce74639ad4b33bf1767b45e",
          "Name": "curve",
          "Description": "Autodesk.DesignScript.Geometry.Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2f0730e11a0e4b85a7573f0cddee5c62",
          "Name": "param",
          "Description": "O parâmetro no qual avaliar\n\ndouble\nValor padrão : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "82250646dd1a42a2acdd85fea9ec0a6d",
          "Name": "Vector",
          "Description": "Um vetor perpendicular à curva no parâmetro",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obter um vetor perpendicular à curva com um parâmetro especificado entre StartParameter() e EndParameter()\n\nCurve.NormalAtParameter (param: double = 0): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0.5;",
      "Id": "29e9cb2c1e024b25bbb9e28451f3638d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "82b94c308ed14c77bc6c2c00b3537b5c",
          "Name": "",
          "Description": "Valor da expressão na linha 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Permite que o código DesignScript seja criado diretamente"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#! python3\r\n\r\nimport clr\r\nclr.AddReference('System.Windows.Forms')\r\nclr.AddReference('System.Drawing')\r\n\r\nfrom System.Windows.Forms import Application, Form, Label, ComboBox, Button, FormStartPosition, ComboBoxStyle\r\nfrom System.Drawing import Point, Size, Color\r\n\r\nclass MyForm(Form):\r\n    def __init__(self):\r\n        self.Text = \"Configuração de Detalhes\"\r\n        self.Size = Size(280, 160)\r\n        \r\n        self.StartPosition = FormStartPosition.CenterScreen\r\n        self.MaximizeBox = False\r\n        self.MinimizeBox = False\r\n        self.ShowIcon = False\r\n\r\n        # Configuração do tema Dark\r\n        self.BackColor = Color.FromArgb(45, 45, 48)\r\n        self.ForeColor = Color.White\r\n\r\n        # Label para pergunta\r\n        self.label_question = Label()\r\n        self.label_question.Text = \"Criar vários detalhes?\"\r\n        self.label_question.Size = Size(200, 30) \r\n        self.label_question.Location = Point((self.ClientSize.Width - self.label_question.Width) // 2, 20)\r\n        self.Controls.Add(self.label_question)\r\n\r\n        # ComboBox para resposta\r\n        self.combobox_details = ComboBox()\r\n        self.combobox_details.Items.Add(\"SIM\")\r\n        self.combobox_details.Items.Add(\"NÃO\")\r\n        self.combobox_details.SelectedIndex = 0\r\n        self.combobox_details.DropDownStyle = ComboBoxStyle.DropDownList\r\n        self.combobox_details.Size = Size(100, 30)\r\n        self.combobox_details.Location = Point((self.ClientSize.Width - self.combobox_details.Width) // 2, 50)\r\n        self.Controls.Add(self.combobox_details)\r\n\r\n        # Botão OK\r\n        self.btn_ok = Button()\r\n        self.btn_ok.Text = \"OK\"\r\n        self.btn_ok.Location = Point((self.ClientSize.Width - self.btn_ok.Width) // 2, 90)\r\n        self.btn_ok.Click += self.on_ok\r\n        self.Controls.Add(self.btn_ok)\r\n\r\n    def on_ok(self, sender, event):\r\n        global create_multiple_details\r\n        create_multiple_details = self.combobox_details.SelectedItem\r\n        self.Close()\r\n\r\nform = MyForm()\r\nApplication.Run(form)\r\nOUT = create_multiple_details\r\n",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "9e61997dd865437cae19beecfdbf0fbe",
      "Inputs": [
        {
          "Id": "a03eaa19b57e4a85b66bb53bcfa51107",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d142841de98e43c6a0c6da275b3fe31d",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('System.Windows.Forms')\r\nclr.AddReference('System.Drawing')\r\n\r\nfrom System.Windows.Forms import Application, Form, Label, TextBox, Button, ComboBox, ComboBoxStyle, CheckBox, FormStartPosition, KeyPressEventArgs\r\nfrom System.Drawing import Point, Size, Color\r\n\r\nfrom System.Collections.Generic import List\r\nfrom System import Array\r\n\r\n# Referências necessárias para a API do Revit\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitServices')\r\nclr.AddReference('RevitAPIUI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.UI import TaskDialog\r\nfrom Autodesk.Revit.DB import BuiltInCategory,ElementId, UnitUtils, UnitTypeId, PlanViewPlane, FilteredElementCollector, View, ViewType\r\nfrom Autodesk.Revit.UI.Selection import ObjectType\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom System.Collections.Generic import List\r\n\r\n# Obtendo o documento ativo\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Parâmetro de entrada\r\nvarios_detalhes = IN[0]\r\nparametro = IN[1] \r\n\r\nclass MyForm1(Form):\r\n    def __init__(self): \r\n        self.Text = 'Criar Detalhes 2D e 3D'\r\n        self.Size = Size(400, 440)\r\n        self.StartPosition = FormStartPosition.CenterScreen\r\n        self.BackColor = Color.FromArgb(45, 45, 48)  # Cor de fundo escura\r\n        self.ShowIcon = False  # Esconder o ícone \r\n        \r\n        self.dropdown_label = Label()\r\n        self.dropdown_label.Text = 'Duplicar como:'\r\n        self.dropdown_label.Location = Point(10, 20)\r\n        self.dropdown_label.Size = Size(150, 20) \r\n        self.dropdown_label.ForeColor = Color.White  # Cor do texto branca\r\n        self.Controls.Add(self.dropdown_label)\r\n        \r\n        self.dropdown = ComboBox()\r\n        self.dropdown.Items.AddRange(Array[str](['WithDetailing', 'Duplicate', 'AsDependent']))\r\n        self.dropdown.Location = Point(160, 20)\r\n        self.dropdown.Size = Size(200, 20)\r\n        self.dropdown.DropDownStyle = ComboBoxStyle.DropDownList\r\n        self.dropdown.BackColor = Color.FromArgb(30, 30, 30)  # Fundo mais escuro para dropdown\r\n        self.dropdown.ForeColor = Color.White  # Cor do texto branca\r\n        self.dropdown.SelectedItem = 'Duplicate'  # Seleção padrão\r\n        self.Controls.Add(self.dropdown)\r\n        \r\n        # Adicionar DropDownList para templates de plantas de piso\r\n        self.floor_template_label = Label()\r\n        self.floor_template_label.Text = 'Template Planta de Piso:'\r\n        self.floor_template_label.Location = Point(10, 60)\r\n        self.floor_template_label.Size = Size(150, 20)\r\n        self.floor_template_label.ForeColor = Color.White  # Cor do texto branca\r\n        self.Controls.Add(self.floor_template_label)\r\n\r\n        self.floor_template_dropdown = ComboBox()\r\n        self.floor_template_dropdown.Location = Point(160, 60)\r\n        self.floor_template_dropdown.Size = Size(200, 20)\r\n        self.floor_template_dropdown.DropDownStyle = ComboBoxStyle.DropDownList\r\n        self.floor_template_dropdown.BackColor = Color.FromArgb(30, 30, 30)  # Fundo mais escuro para dropdown\r\n        self.floor_template_dropdown.ForeColor = Color.White  # Cor do texto branca\r\n        self.Controls.Add(self.floor_template_dropdown)\r\n        \r\n        # Adicionar DropDownList para templates de vistas 3D\r\n        self.threeD_template_label = Label()\r\n        self.threeD_template_label.Text = 'Template Vista 3D:' \r\n        self.threeD_template_label.Location = Point(10, 100)\r\n        self.threeD_template_label.Size = Size(150, 20)\r\n        self.threeD_template_label.ForeColor = Color.White  # Cor do texto branca\r\n        self.Controls.Add(self.threeD_template_label)\r\n\r\n        self.threeD_template_dropdown = ComboBox()\r\n        self.threeD_template_dropdown.Location = Point(160, 100)\r\n        self.threeD_template_dropdown.Size = Size(200, 20)\r\n        self.threeD_template_dropdown.DropDownStyle = ComboBoxStyle.DropDownList\r\n        self.threeD_template_dropdown.BackColor = Color.FromArgb(30, 30, 30)  # Fundo mais escuro para dropdown\r\n        self.threeD_template_dropdown.ForeColor = Color.White  # Cor do texto branca\r\n        self.Controls.Add(self.threeD_template_dropdown)\r\n\r\n        # Restante do código...\r\n        self.checkbox_label = Label()\r\n        self.checkbox_label.Text = 'Criar Planta de Piso?:'\r\n        self.checkbox_label.Location = Point(10, 140)\r\n        self.checkbox_label.Size = Size(120, 20)\r\n        self.checkbox_label.ForeColor = Color.White  # Cor do texto branca\r\n        self.Controls.Add(self.checkbox_label)\r\n        \r\n        self.checkbox = CheckBox()\r\n        self.checkbox.Text = 'Sim'\r\n        self.checkbox.Location = Point(160, 140)\r\n        self.checkbox.Size = Size(150, 20)\r\n        self.checkbox.BackColor = Color.FromArgb(45, 45, 48)  # Mesma cor do fundo do formulário\r\n        self.checkbox.ForeColor = Color.White  # Cor do texto branca\r\n        self.checkbox.Checked = True  # Caixa marcada por padrão\r\n        self.Controls.Add(self.checkbox)\r\n        \r\n        self.checkbox3d_label = Label()\r\n        self.checkbox3d_label.Text = 'Criar Vista 3D?:'\r\n        self.checkbox3d_label.Location = Point(10, 180)\r\n        self.checkbox3d_label.Size = Size(100, 20)\r\n        self.checkbox3d_label.ForeColor = Color.White  # Cor do texto branca\r\n        self.Controls.Add(self.checkbox3d_label)\r\n        \r\n        self.checkbox3d = CheckBox()\r\n        self.checkbox3d.Text = 'Sim'\r\n        self.checkbox3d.Location = Point(160, 180)\r\n        self.checkbox3d.Size = Size(150, 20)\r\n        self.checkbox3d.BackColor = Color.FromArgb(45, 45, 48)  # Mesma cor do fundo do formulário\r\n        self.checkbox3d.ForeColor = Color.White  # Cor do texto branca\r\n        self.checkbox3d.Checked = True  # Caixa marcada por padrão\r\n        self.Controls.Add(self.checkbox3d)\r\n        \r\n        self.pick_button = Button()\r\n        self.pick_button.Text = 'Selecionar regiões'\r\n        self.pick_button.Location = Point(120, 220)\r\n        self.pick_button.Size = Size(160, 30)  # Tamanho aumentado para caber o texto\r\n        self.pick_button.BackColor = Color.Red  # Fundo vermelho do botão\r\n        self.pick_button.ForeColor = Color.White  # Cor do texto branca\r\n        self.pick_button.Click += self.pick_button_click\r\n        self.Controls.Add(self.pick_button)\r\n\r\n        self.button = Button()\r\n        self.button.Text = 'OK'\r\n        self.button.Location = Point(160, 260)\r\n        self.button.Size = Size(80, 30)  # Tamanho aumentado para caber o texto\r\n        self.button.BackColor = Color.FromArgb(51, 153, 255)  # Fundo azul do botão\r\n        self.button.ForeColor = Color.White  # Cor do texto branca\r\n        self.button.Click += self.button_click\r\n        self.Controls.Add(self.button)\r\n        \r\n        # Informação da empresa\r\n        self.company_info = Label()\r\n        self.company_info.Text = 'Versão 1.0\\nBIM Coder | Première Engenharia\\nBy: Fellipe Caetano\\nIG: @bimcoder YT: _bimcoder\\ncontato@bimcoder.net'  \r\n        self.company_info.Location = Point(10, 310)\r\n        self.company_info.Size = Size(280, 80)\r\n        self.company_info.ForeColor = Color.White  # Cor do texto branca\r\n        self.Controls.Add(self.company_info)\r\n        \r\n        # Preencher os dropdowns com os templates de vistas\r\n        self.populate_templates()\r\n    \r\n    def populate_templates(self):\r\n        doc = DocumentManager.Instance.CurrentDBDocument\r\n        \r\n        # Entradas - Nomes dos templates prioritários\r\n        nome_template_floor = IN[2]\r\n        nome_template_threeD = IN[3]\r\n        \r\n        floor_plan_templates, threeD_templates = get_view_templates(doc, nome_template_floor, nome_template_threeD)\r\n        \r\n        self.floor_template_dropdown.Items.AddRange(Array[str](floor_plan_templates))\r\n        self.floor_template_dropdown.SelectedIndex = 0\r\n        \r\n        self.threeD_template_dropdown.Items.AddRange(Array[str](threeD_templates))\r\n        self.threeD_template_dropdown.SelectedIndex = 0\r\n    \r\n    def height_textbox_keypress(self, sender, event):\r\n        if not event.KeyChar.isdigit() and event.KeyChar != '\\b':\r\n            event.Handled = True\r\n    \r\n    def button_click(self, sender, event):\r\n        global detail_values\r\n        global duplicate_option\r\n        global is_floor_plan\r\n        global is_3d_view\r\n        global height_3d\r\n        global selected_elements\r\n        global selected_floor_template\r\n        global selected_3D_template\r\n        \r\n        detail_values = [elem.LookupParameter(parametro).AsString() for elem in selected_elements]\r\n        duplicate_option = self.dropdown.SelectedItem\r\n        is_floor_plan = self.checkbox.Checked\r\n        is_3d_view = self.checkbox3d.Checked\r\n        selected_floor_template = self.floor_template_dropdown.SelectedItem\r\n        selected_3D_template = self.threeD_template_dropdown.SelectedItem\r\n        try:\r\n            height_3d = GetTopBottomViewRange(doc.ActiveView)\r\n        except ValueError:\r\n            height_3d = None\r\n        self.Close()\r\n\r\n    def pick_button_click(self, sender, event):\r\n        self.Hide()\r\n        doc = DocumentManager.Instance.CurrentDBDocument\r\n        uidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n        global selected_elements\r\n        try:\r\n            references = uidoc.Selection.PickObjects(ObjectType.Element, \"Selecione elementos\")\r\n            selected_elements = []\r\n            missing_name_elements = []\r\n            for reference in references:\r\n                element = doc.GetElement(reference)\r\n                \r\n                if element.Category.Id.IntegerValue == int(BuiltInCategory.OST_DetailComponents):\r\n                    param_value = element.LookupParameter(parametro)\r\n                    if param_value:\r\n                        param_value = param_value.AsString()\r\n                        if param_value and param_value != \"\":\r\n                            selected_elements.append(element)\r\n                        else:\r\n                            missing_name_elements.append(element)\r\n                    else:\r\n                        missing_name_elements.append(element)\r\n            \r\n            if missing_name_elements:\r\n                missing_ids = List[ElementId]([elem.Id for elem in missing_name_elements])\r\n                uidoc.Selection.SetElementIds(missing_ids)\r\n                TaskDialog.Show(\"Atenção\", \"As Regiões que estão selecionadas não possuem nome definido! Você pode continuar a operação ou cancelar e tentar novamente\")\r\n                \r\n            self.pick_button.BackColor = Color.Green  # Mudar a cor do botão para verde\r\n            self.pick_button.Text = 'Regiões selecionadas!' \r\n        except Exception as e:\r\n            selected_elements = []\r\n            TaskDialog.Show('Erro', str(e))\r\n        self.Show()\r\n        self.StartPosition = FormStartPosition.CenterScreen\r\n        self.BringToFront()\r\n\r\n        \r\nclass MyForm2(Form):\r\n    def __init__(self): \r\n        self.Text = 'Criar Detalhes 2D e 3D'\r\n        self.Size = Size(400, 480)\r\n        self.StartPosition = FormStartPosition.CenterScreen\r\n        self.BackColor = Color.FromArgb(45, 45, 48)  # Cor de fundo escura\r\n        self.ShowIcon = False  # Esconder o ícone\r\n        \r\n        # Adicionar campo de texto para \"Nome do detalhe\"\r\n        self.name_label = Label()\r\n        self.name_label.Text = 'Nome do detalhe:'\r\n        self.name_label.Location = Point(10, 20)\r\n        self.name_label.Size = Size(150, 20)\r\n        self.name_label.ForeColor = Color.White  # Cor do texto branca\r\n        self.Controls.Add(self.name_label)\r\n        \r\n        self.name_textbox = TextBox()\r\n        self.name_textbox.Location = Point(160, 20)\r\n        self.name_textbox.Size = Size(200, 20)\r\n        self.Controls.Add(self.name_textbox)\r\n\r\n        self.dropdown_label = Label()\r\n        self.dropdown_label.Text = 'Duplicar como:'\r\n        self.dropdown_label.Location = Point(10, 60)\r\n        self.dropdown_label.Size = Size(150, 20)\r\n        self.dropdown_label.ForeColor = Color.White  # Cor do texto branca\r\n        self.Controls.Add(self.dropdown_label)\r\n        \r\n        self.dropdown = ComboBox()\r\n        self.dropdown.Items.AddRange(Array[str](['WithDetailing', 'Duplicate', 'AsDependent']))\r\n        self.dropdown.Location = Point(160, 60)\r\n        self.dropdown.Size = Size(200, 20)\r\n        self.Controls.Add(self.dropdown)\r\n        self.dropdown.Location = Point(160, 60)\r\n        self.dropdown.Size = Size(200, 20)\r\n        self.dropdown.DropDownStyle = ComboBoxStyle.DropDownList\r\n        self.dropdown.BackColor = Color.FromArgb(30, 30, 30)  # Fundo mais escuro para dropdown\r\n        self.dropdown.ForeColor = Color.White  # Cor do texto branca\r\n        self.dropdown.SelectedItem = 'Duplicate'  # Seleção padrão\r\n        self.Controls.Add(self.dropdown)\r\n        \r\n        # Adicionar DropDownList para templates de plantas de piso\r\n        self.floor_template_label = Label()\r\n        self.floor_template_label.Text = 'Template Planta de Piso:'\r\n        self.floor_template_label.Location = Point(10, 100)\r\n        self.floor_template_label.Size = Size(150, 20)\r\n        self.floor_template_label.ForeColor = Color.White  # Cor do texto branca\r\n        self.Controls.Add(self.floor_template_label)\r\n\r\n        self.floor_template_dropdown = ComboBox()\r\n        self.floor_template_dropdown.Location = Point(160, 100)\r\n        self.floor_template_dropdown.Size = Size(200, 20)\r\n        self.floor_template_dropdown.DropDownStyle = ComboBoxStyle.DropDownList\r\n        self.floor_template_dropdown.BackColor = Color.FromArgb(30, 30, 30)  # Fundo mais escuro para dropdown\r\n        self.floor_template_dropdown.ForeColor = Color.White  # Cor do texto branca\r\n        self.Controls.Add(self.floor_template_dropdown)\r\n        \r\n        # Adicionar DropDownList para templates de vistas 3D\r\n        self.threeD_template_label = Label()\r\n        self.threeD_template_label.Text = 'Template Vista 3D:'\r\n        self.threeD_template_label.Location = Point(10, 140)\r\n        self.threeD_template_label.Size = Size(150, 20)\r\n        self.threeD_template_label.ForeColor = Color.White  # Cor do texto branca\r\n        self.Controls.Add(self.threeD_template_label)\r\n\r\n        self.threeD_template_dropdown = ComboBox()\r\n        self.threeD_template_dropdown.Location = Point(160, 140)\r\n        self.threeD_template_dropdown.Size = Size(200, 20)\r\n        self.threeD_template_dropdown.DropDownStyle = ComboBoxStyle.DropDownList\r\n        self.threeD_template_dropdown.BackColor = Color.FromArgb(30, 30, 30)  # Fundo mais escuro para dropdown\r\n        self.threeD_template_dropdown.ForeColor = Color.White  # Cor do texto branca\r\n        self.Controls.Add(self.threeD_template_dropdown)\r\n\r\n        # Restante do código...\r\n        self.checkbox_label = Label()\r\n        self.checkbox_label.Text = 'Criar Planta de Piso?:'\r\n        self.checkbox_label.Location = Point(10, 180)\r\n        self.checkbox_label.Size = Size(120, 20)\r\n        self.checkbox_label.ForeColor = Color.White  # Cor do texto branca\r\n        self.Controls.Add(self.checkbox_label)\r\n        \r\n        self.checkbox = CheckBox()\r\n        self.checkbox.Text = 'Sim'\r\n        self.checkbox.Location = Point(160, 180)\r\n        self.checkbox.Size = Size(150, 20)\r\n        self.checkbox.BackColor = Color.FromArgb(45, 45, 48)  # Mesma cor do fundo do formulário\r\n        self.checkbox.ForeColor = Color.White  # Cor do texto branca\r\n        self.checkbox.Checked = True  # Caixa marcada por padrão\r\n        self.Controls.Add(self.checkbox)\r\n        \r\n        self.checkbox3d_label = Label()\r\n        self.checkbox3d_label.Text = 'Criar Vista 3D?:'\r\n        self.checkbox3d_label.Location = Point(10, 220)\r\n        self.checkbox3d_label.Size = Size(100, 20)\r\n        self.checkbox3d_label.ForeColor = Color.White  # Cor do texto branca\r\n        self.Controls.Add(self.checkbox3d_label)\r\n        \r\n        self.checkbox3d = CheckBox()\r\n        self.checkbox3d.Text = 'Sim'\r\n        self.checkbox3d.Location = Point(160, 220)\r\n        self.checkbox3d.Size = Size(150, 20)\r\n        self.checkbox3d.BackColor = Color.FromArgb(45, 45, 48)  # Mesma cor do fundo do formulário\r\n        self.checkbox3d.ForeColor = Color.White  # Cor do texto branca\r\n        self.checkbox3d.Checked = True  # Caixa marcada por padrão\r\n        self.Controls.Add(self.checkbox3d)\r\n        \r\n        self.pick_button = Button()\r\n        self.pick_button.Text = 'Selecionar região'\r\n        self.pick_button.Location = Point(120, 260)\r\n        self.pick_button.Size = Size(160, 30)  # Tamanho aumentado para caber o texto\r\n        self.pick_button.BackColor = Color.Red  # Fundo vermelho do botão\r\n        self.pick_button.ForeColor = Color.White  # Cor do texto branca\r\n        self.pick_button.Click += self.pick_button_click\r\n        self.Controls.Add(self.pick_button)\r\n\r\n        self.button = Button()\r\n        self.button.Text = 'OK'\r\n        self.button.Location = Point(160, 300)\r\n        self.button.Size = Size(80, 30)  # Tamanho aumentado para caber o texto\r\n        self.button.BackColor = Color.FromArgb(51, 153, 255)  # Fundo azul do botão\r\n        self.button.ForeColor = Color.White  # Cor do texto branca\r\n        self.button.Click += self.button_click\r\n        self.Controls.Add(self.button)\r\n        \r\n        # Informação da empresa\r\n        self.company_info = Label()\r\n        self.company_info.Text = 'Versão 1.0\\nBIM Coder | Première Engenharia\\nBy: Fellipe Caetano\\nIG: @bimcoder YT: _bimcoder\\ncontato@bimcoder.net'  \r\n        self.company_info.Location = Point(10, 350)\r\n        self.company_info.Size = Size(380, 80)\r\n        self.company_info.ForeColor = Color.White  # Cor do texto branca\r\n        self.Controls.Add(self.company_info)\r\n        \r\n        # Preencher os dropdowns com os templates de vistas\r\n        self.populate_templates()\r\n    \r\n    def populate_templates(self):\r\n        doc = DocumentManager.Instance.CurrentDBDocument\r\n        \r\n        # Entradas - Nomes dos templates prioritários\r\n        nome_template_floor = IN[2]\r\n        nome_template_threeD = IN[3]\r\n        \r\n        floor_plan_templates, threeD_templates = get_view_templates(doc, nome_template_floor, nome_template_threeD)\r\n        \r\n        self.floor_template_dropdown.Items.AddRange(Array[str](floor_plan_templates))\r\n        self.floor_template_dropdown.SelectedIndex = 0\r\n        \r\n        self.threeD_template_dropdown.Items.AddRange(Array[str](threeD_templates))\r\n        self.threeD_template_dropdown.SelectedIndex = 0\r\n    \r\n    def height_textbox_keypress(self, sender, event):\r\n        if not event.KeyChar.isdigit() and event.KeyChar != '\\b':\r\n            event.Handled = True\r\n    \r\n    def button_click(self, sender, event):\r\n        global detail_values\r\n        global duplicate_option\r\n        global is_floor_plan\r\n        global is_3d_view\r\n        global height_3d\r\n        global selected_elements\r\n        global selected_floor_template\r\n        global selected_3D_template\r\n        global detail_name\r\n        \r\n        detail_name = self.name_textbox.Text\r\n        detail_values = [elem.LookupParameter(parametro).AsString() for elem in selected_elements]\r\n        duplicate_option = self.dropdown.SelectedItem\r\n        is_floor_plan = self.checkbox.Checked\r\n        is_3d_view = self.checkbox3d.Checked\r\n        selected_floor_template = self.floor_template_dropdown.SelectedItem\r\n        selected_3D_template = self.threeD_template_dropdown.SelectedItem\r\n        try:\r\n            height_3d = GetTopBottomViewRange(doc.ActiveView)\r\n        except ValueError:\r\n            height_3d = None\r\n        self.Close()\r\n\r\n    def pick_button_click(self, sender, event):\r\n        self.Hide()\r\n        doc = DocumentManager.Instance.CurrentDBDocument\r\n        uidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n        global selected_elements\r\n        try:\r\n            reference = uidoc.Selection.PickObject(ObjectType.Element, \"Selecione um elemento\")\r\n            selected_elements = []\r\n            missing_name_elements = []\r\n            element = doc.GetElement(reference)\r\n                \r\n            if element.Category.Id.IntegerValue == int(BuiltInCategory.OST_DetailComponents):\r\n                selected_elements.append(element)\r\n            else:\r\n                TaskDialog.Show(\"Atenção\",\"Por favor, selecione uma Região!\")           \r\n           \r\n                \r\n            self.pick_button.BackColor = Color.Green  # Mudar a cor do botão para verde\r\n            self.pick_button.Text = 'Região selecionada!' \r\n        except Exception as e:\r\n            selected_elements = []\r\n            TaskDialog.Show('Erro', str(e))\r\n        self.Show()\r\n        self.StartPosition = FormStartPosition.CenterScreen\r\n        self.BringToFront()\r\n\r\n\r\n\r\ndef GetTopBottomViewRange(view):\r\n    top = UnitUtils.ConvertFromInternalUnits(view.GetViewRange().GetOffset(PlanViewPlane.TopClipPlane),UnitTypeId.Centimeters)\r\n    \r\n    bottom = UnitUtils.ConvertFromInternalUnits(view.GetViewRange().GetOffset(PlanViewPlane.BottomClipPlane),UnitTypeId.Centimeters)\r\n    \r\n    return top, bottom\r\n    \r\ndef get_view_templates(doc, nome_template_floor, nome_template_threeD):\r\n    collector = FilteredElementCollector(doc).OfClass(View)  \r\n    # Filtrar templates de planta de piso e 3D\r\n    floor_plan_templates = [v for v in collector if v.IsTemplate and v.ViewType == ViewType.FloorPlan]\r\n    threeD_templates = [v for v in collector if v.IsTemplate and v.ViewType == ViewType.ThreeD]\r\n    \r\n    # Ordenar as listas colocando os templates com os nomes especificados na primeira posição\r\n    floor_plan_templates_sorted = sorted(floor_plan_templates, key=lambda x: x.Name != nome_template_floor)\r\n    threeD_templates_sorted = sorted(threeD_templates, key=lambda x: x.Name != nome_template_threeD)\r\n    \r\n    return [e.Name for e in floor_plan_templates_sorted], [e.Name for e in threeD_templates_sorted]\r\n\r\n\r\n# Inicializar e executar o formulário\r\nif varios_detalhes==\"SIM\":\r\n    form = MyForm1()\r\n    Application.Run(form)  \r\n    OUT = (detail_values, duplicate_option, is_floor_plan, is_3d_view, height_3d,  selected_elements, selected_floor_template,selected_3D_template )\r\nelse:\r\n    form = MyForm2()\r\n    Application.Run(form)\r\n    \r\n    OUT = (detail_name, duplicate_option, is_floor_plan, is_3d_view, height_3d, selected_elements,selected_floor_template,selected_3D_template )\r\n\r\n\r\n",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "9aa1451e2ed04d3694e6d4c645a495b3",
      "Inputs": [
        {
          "Id": "f7ff8117b68c4a13a14b4de4f5f8e9f8",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "79a6bcb9bfb443d4aa6c5a4060c3d845",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dd9d32161e7b45f78466dc7c5dac7aba",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2950f87cb26e4826b849a86a61ce9e47",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f7296a3f648841ff907e43b52cb56a68",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "p.NÚMERO.DETALHE",
      "Id": "960e3046a8d24ede816dd50d43a28816",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5fab3f3c6daa4524b2dd0cef222ef467",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Cria uma sequência de caracteres."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "nomeDaVista = IN[0];\nduplicateAs = IN[1];\nfloorPlan = IN[2];\nview3D = IN[3];\nheight = IN[4];\nfilledRegion = IN[5];\nfloorPlan_template = IN[6];\nthree3D_template = IN[7];",
      "Id": "9cd4698b919b43f893f219e97d93d9d9",
      "Inputs": [
        {
          "Id": "575443a55aba4a9c91655ec423e3b487",
          "Name": "IN",
          "Description": "IN",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d661ce2badc04684992760befec74760",
          "Name": "",
          "Description": "nomeDaVista",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "87074a7c5d5c4e3ea7c3d9bd63a5b87f",
          "Name": "",
          "Description": "duplicateAs",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8d920c3fe910422fbd7cc7b58166521e",
          "Name": "",
          "Description": "floorPlan",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "536fde84e5894962951151e4d2dbf377",
          "Name": "",
          "Description": "view3D",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fd73f13cf4684942997e03a49734f508",
          "Name": "",
          "Description": "height",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1c6dc0518c24487db1a93662a8d080da",
          "Name": "",
          "Description": "filledRegion",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "acade79da9294711a4754fb7311b6926",
          "Name": "",
          "Description": "floorPlan_template",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "159d9a831a4349aaa9c1501ddc160d2f",
          "Name": "",
          "Description": "three3D_template",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Permite que o código DesignScript seja criado diretamente"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "DOC - DETALHE",
      "Id": "ebcfcb906f77456681c06700216991f6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c50b3d5c85b0475296b7df2c8e95048c",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Cria uma sequência de caracteres."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "DOC - 3D",
      "Id": "ccc9bbcf0c59488ab2d4fe40a64c02ac",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0465a1d06010414bafd2a825c27267c6",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Cria uma sequência de caracteres."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import FilteredElementCollector, View, BuiltInParameter\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n# Entradas do Dynamo\r\ntoggle = IN[0]\r\nviews = IN[1] if isinstance(IN[1], list) else [IN[1]]\r\nview_template_name = IN[2]\r\nview_names = IN[3] if isinstance(IN[3], list) else [IN[3]]\r\nresult = []\r\n\r\n# Documento do Revit\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n\r\n# Função para obter o template de visualização pelo nome\r\ndef get_view_template_by_name(doc, template_name):\r\n    collector = FilteredElementCollector(doc).OfClass(View)\r\n    for view in collector:\r\n        if view.IsTemplate and view.Name == template_name:\r\n            return view\r\n    return None\r\ntest=[]\r\nif toggle:\r\n    # Obter o template de visualização\r\n    view_template = get_view_template_by_name(doc, view_template_name)\r\n    \r\n    # Iniciar transação\r\n    TransactionManager.Instance.EnsureInTransaction(doc)\r\n    \r\n    # Aplicar o template em cada vista\r\n    i = 0\r\n    for v in views:    \r\n        view = UnwrapElement(v)\r\n        view.ViewTemplateId = view_template.Id  \r\n        view_name = view.get_Parameter(BuiltInParameter.VIEW_NAME)\r\n        view_name.Set(view_names[i])\r\n        result.append(view)\r\n        i+=1\r\n    \r\n    # Finalizar transação\r\n    TransactionManager.Instance.TransactionTaskDone()\r\n    \r\n    # Ordenar o resultado pelo nome da vista\r\n    result.sort(key=lambda v: v.get_Parameter(BuiltInParameter.VIEW_NAME).AsString())\r\n    \r\n    # Saída\r\n    OUT = result\r\n    \r\n",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "edf63e0919804bc8bcbde2faa164c69b",
      "Inputs": [
        {
          "Id": "b459f691cadb4f519a7c13817d8b5a90",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bcdf6af5adee442b8fefe32d42fcfcec",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5a6303bd33d54cb493b378a8b88c272f",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "65b5aa8f58794120b2b8169325eeae9c",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "40981a06dbfa4ffe96bb6ab6fec430b2",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitAPIUI\")\r\nclr.AddReference(\"RevitServices\")\r\nclr.AddReference(\"RevitNodes\")\r\n\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.UI import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom Revit.Elements import Element\r\n\r\n# Obtém o documento ativo do Revit\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Função para categorizar vistas em 2D e 3D\r\ndef categorizar_vistas(vistas):\r\n    vistas_2d = []\r\n    vistas_3d = []\r\n\r\n    for vista in vistas:\r\n        if isinstance(vista, ViewPlan):\r\n            vistas_2d.append(vista)\r\n        elif isinstance(vista, View3D):\r\n            vistas_3d.append(vista)\r\n    \r\n    return vistas_2d, vistas_3d\r\n\r\n# Função para formatar a lista de vistas\r\ndef formatar_lista_vistas(vistas, tipo):\r\n    resultado = \"{}:\\n\".format(tipo)\r\n    for vista in vistas:\r\n        resultado += \"- {}\\n\".format(vista.Name)\r\n    return resultado\r\n\r\n# Entrada do Dynamo\r\nvistas_input = UnwrapElement(IN[0])\r\n\r\n# Categoriza as vistas\r\nvistas_2d, vistas_3d = categorizar_vistas(vistas_input)\r\n\r\n# Formata as listas de vistas\r\nlista_vistas_2d = formatar_lista_vistas(vistas_2d, \"Vistas 2D\") if vistas_2d else \"\"\r\nlista_vistas_3d = formatar_lista_vistas(vistas_3d, \"Vistas 3D\") if vistas_3d else \"\"\r\n\r\n# Concatena as listas\r\nresultado_final = \"Vistas criadas:\\n\\n\" + lista_vistas_2d + \"\\n\" + lista_vistas_3d\r\n\r\n# Exibe a mensagem para o usuário\r\nif resultado_final.strip():\r\n    TaskDialog.Show(\"Vistas Criadas\", resultado_final)\r\nelse:\r\n    TaskDialog.Show(\"Vistas Criadas\", \"Nenhuma vista foi criada.\")\r\n\r\nOUT = resultado_final\r\n",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "09957fae46ca4f7ea929bc52774f380a",
      "Inputs": [
        {
          "Id": "a4c7b95321524cbd8848deb6a0eb6342",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cc4b4c0cf1c14222962facaa5ebe2284",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "21143ab85d4d45a69901368cb18d7a99",
      "Inputs": [
        {
          "Id": "7978e4785abd4d58ae628ead7c27b892",
          "Name": "list0",
          "Description": "Lista para unir em uma.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "426aff8c03404a8c8f74a2d6dd22d538",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1af59d0a7748458ea9f259f32c93eb25",
          "Name": "list",
          "Description": "Listas unidas.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Concatena todas as listas fornecidas em uma única lista.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "6f9ecc44de8e4e578b910bf93c76268b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "fbff6887abd744c29170ba9e314a20a8",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Seleção entre True e False."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.OfRepeatedItem@var[]..[],int",
      "Id": "8060968133c44bfdacf1b84774e179f0",
      "Inputs": [
        {
          "Id": "d6234552696f46288005eee425002352",
          "Name": "item",
          "Description": "O item para repetir.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4c48d9e7c9c84383af0feb7fb430940f",
          "Name": "amount",
          "Description": "O número de vezes para repetir.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3eb4fecdb9594c74a1442e7ef7d17ae4",
          "Name": "list",
          "Description": "Lista de itens repetidos.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Cria uma lista que contém o determinado item no número determinado de vezes.\n\nList.OfRepeatedItem (item: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Count@var[]..[]",
      "Id": "9b798e4b06f34589b91c579bba262385",
      "Inputs": [
        {
          "Id": "8ca8d4ec84614230b1c71a197fdc2af9",
          "Name": "list",
          "Description": "Lista da qual para obter a contagem de itens.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9946da6351474d13a5e27d838a4f200c",
          "Name": "int",
          "Description": "Comprimento da lista.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Retorna o número de itens armazenados na determinada lista.\n\nList.Count (list: var[]..[]): int"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitAPIUI')\r\nclr.AddReference('RevitServices')\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom Autodesk.Revit.UI import TaskDialog\r\n\r\n# Coletando o documento atual\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Função para verificar a existência do parâmetro e sua associação com a categoria\r\ndef check_parameter_and_category(parameter_name):\r\n    # Obtendo os parâmetros do projeto\r\n    parameters = doc.ParameterBindings\r\n    it = parameters.ForwardIterator()\r\n    it.Reset()\r\n    while it.MoveNext():\r\n        definition = it.Key\r\n        binding = it.Current\r\n        \r\n        if definition.Name == parameter_name:\r\n            # Verificar se a categoria associada é a especificada\r\n            if isinstance(binding, ElementBinding):\r\n                categories = binding.Categories\r\n                for cat in categories:\r\n                    if cat.Id == ElementId(BuiltInCategory.OST_DetailComponents):\r\n                        return True\r\n    return False\r\n\r\n# Verificar se o parâmetro 'p.NÚMERO.DETALHE' existe\r\nparameter_name = IN[1]\r\nparameter_exists = check_parameter_and_category(parameter_name)\r\n\r\n# Exibir TaskDialog se o parâmetro não existir\r\nif not parameter_exists:\r\n    TaskDialog.Show(\"Parâmetro Não Encontrado\", \"Necessário criar o parâmetro p.NÚMERO.DETALHE no projeto atual.\")\r\n\r\n# Saída do script\r\nOUT = parameter_exists",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "039f23d72ccd4d0cb37a697c4ce8225a",
      "Inputs": [
        {
          "Id": "7f2bc7539d8646f6820d5bd13824d5a4",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "68db538ee9474cf3bf19906d58b744ea",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "761f33a3dc4a47d6abfcdebc552cb0b8",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Importando as bibliotecas necessárias do Revit\r\nimport clr\r\nclr.AddReference('RevitServices')\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitNodes')\r\nclr.AddReference('ProtoGeometry')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Architecture import *\r\nfrom Autodesk.Revit.DB.Structure import *\r\nfrom Autodesk.Revit.DB.Mechanical import *\r\n\r\n# Obtendo o documento atual\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Função para obter as linhas da FilledRegion\r\ndef get_filled_region_lines(filled_region):\r\n    # Inicializando uma lista para armazenar as linhas\r\n    lines = []\r\n    \r\n    # Obtendo as bordas da FilledRegion\r\n    boundaries = filled_region.GetBoundaries()\r\n    \r\n    # Iterando sobre cada boundary\r\n    for boundary in boundaries:\r\n        # Iterando sobre cada curva no boundary\r\n        for curve in boundary:\r\n            lines.append(curve.ToProtoType())\r\n    \r\n    return lines\r\n\r\n# Verifica se a entrada é uma lista ou um único elemento\r\nif isinstance(IN[0], list):\r\n    filled_regions = [UnwrapElement(x) for x in IN[0]]\r\nelse:\r\n    filled_regions = [UnwrapElement(IN[0])]\r\n\r\n# Aplicando a função a todos os elementos na lista\r\nall_lines = []\r\nfor region in filled_regions:\r\n    lines = get_filled_region_lines(region)\r\n    all_lines.append(lines)\r\n\r\n# Saída do script\r\nOUT = all_lines if len(all_lines) > 1 else all_lines[0]\r\n",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "b93238d9a6444d0d82a68d4cbcbb8d59",
      "Inputs": [
        {
          "Id": "660fc04941c1446a92442bfde2ec558a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "adc5817242324999ba3aeef4870ee700",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "archilab.Revit.Views.Views.SetCropBoxByCurves@Revit.Elements.Views.View,Autodesk.DesignScript.Geometry.Curve[]",
      "Id": "a36edc0027d54db7872f515356e48bad",
      "Inputs": [
        {
          "Id": "1af267166d7747b498d8c497a61a26ad",
          "Name": "view",
          "Description": "View",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3a6ee4b8900c4df1af3890d82c1b6eae",
          "Name": "curves",
          "Description": "Curve[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8f7c3bf845894f2ba0480b0ca6d03cfb",
          "Name": "View",
          "Description": "View",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Views.SetCropBoxByCurves (view: View, curves: Curve[]): View"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "archilab.Revit.Views.Views.Duplicate@Revit.Elements.Views.View,string",
      "Id": "796e3b59dcee40e6abcc5bd477225973",
      "Inputs": [
        {
          "Id": "6c631e0e3e4b4876be9b89580de5b45d",
          "Name": "view",
          "Description": "View",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "89f6c77ac0404fae8963a781c3cc2cba",
          "Name": "options",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "43259ee2419e404a91d5cc2dc3087ac9",
          "Name": "View",
          "Description": "View",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Views.Duplicate (view: View, options: string): View"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "if IN[0]:\r\n\tOUT = IN[1]\r\nelse:\r\n\tOUT = IN[2]",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "5de8d57200fd46fb911bd47727db2de4",
      "Inputs": [
        {
          "Id": "9aead20d1a354fec8fa91eb7919852d9",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "04b70ca825ce4ab19fe22aa537c11457",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "55fa8212de45497884eb71c3dc09b357",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "93759e87dc164bc6a7ed07f282b6d367",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "archilab.Revit.Views.Views.CropBoxVisible@Revit.Elements.Views.View,bool",
      "Id": "cc8a45b2c1724d49a0cea44480d76ccb",
      "Inputs": [
        {
          "Id": "2bcc846a10894d80a890e917bc68d18d",
          "Name": "view",
          "Description": "View",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e0aa86b68f8940c58d408f3d7531f09e",
          "Name": "visible",
          "Description": "bool\nValor padrão : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b9482e312fa14842b210bcc5f18b1cb3",
          "Name": "View",
          "Description": "View",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Views.CropBoxVisible (view: View, visible: bool = true): View"
    },
    {
      "ConcreteType": "CoreNodeModels.HigherOrder.ComposeFunctions, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "324b5a90c2f64d4d9f82e339d92b675c",
      "Inputs": [
        {
          "Id": "fe0850b088f7451896fc584d4c6322c0",
          "Name": "function0",
          "Description": "Função nº 0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e962e1ad70974982b5eaba73853d4fcb",
          "Name": "function1",
          "Description": "Função nº 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "aaa3e44a6e5e4be19383e7674c3ad428",
          "Name": "function",
          "Description": "Função composta.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Retorna uma única função de várias funções. Por exemplo: as funções módulo e divisão são compostas em uma única função para aplicar a uma lista."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitAPIUI')\r\nclr.AddReference('RevitServices')\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom Autodesk.Revit.UI import TaskDialog\r\n\r\n# Coletando o documento atual\r\ncheck = IN[0]\r\n\r\nif check==None:\r\n\tTaskDialog.Show(\"Aviso\",\"Necessário instalar o pacote archilab no Dynamo. Por favor, consulte o tutorial.\")\r\n\r\n# Saída do script\r\nOUT = check",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "06918f38a6a34425be9f1ee32b7ff0a7",
      "Inputs": [
        {
          "Id": "2ec95af8e272463998ab3e44ace35800",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "68b40eaf43e945e99dd711c1dc7ac24b",
          "Name": "OUT",
          "Description": "Resultado do script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Executa um script Python incorporado."
    }
  ],
  "Connectors": [
    {
      "Start": "ca1cb63dd9cc4247a1f8181622b37938",
      "End": "d6234552696f46288005eee425002352",
      "Id": "2a506ffdbca04111916c6ed4daf27cb9",
      "IsHidden": "False"
    },
    {
      "Start": "9eda8b97fc304d00b95db1af12ee8551",
      "End": "3c83ad361c6e40539e3669c82efabb6c",
      "Id": "29623c00123740f693c0c19d265870ff",
      "IsHidden": "False"
    },
    {
      "Start": "eb87859f2e2d4587955e184457e38b15",
      "End": "5ff39c105a174a46aab1c037926c6f82",
      "Id": "d2b086d7104741baa7daeb49eb92e8d7",
      "IsHidden": "False"
    },
    {
      "Start": "149f1e39e0d7405081ed1fe19f6d4670",
      "End": "55fa8212de45497884eb71c3dc09b357",
      "Id": "784de8d492d84ffb975d1dfbbe8d10ce",
      "IsHidden": "False"
    },
    {
      "Start": "0d178b0d42de494b8fa629b60fa63f66",
      "End": "bcdf6af5adee442b8fefe32d42fcfcec",
      "Id": "add3fba2422b456490ea79a4dafbf4e4",
      "IsHidden": "False"
    },
    {
      "Start": "f988d26de2be43f9b59a52f74159cf1f",
      "End": "671d8e1c7c9f4752a1e7d99fd264caa0",
      "Id": "b789cf5c69674b029a32773efee844ed",
      "IsHidden": "False"
    },
    {
      "Start": "5a4368e17de1467f8b38a71e7fff8234",
      "End": "a9feb702603b4bd390eabedef20ab803",
      "Id": "20d91f8954584b1db242f3dc4ecaf183",
      "IsHidden": "False"
    },
    {
      "Start": "2b78624c35e3425b869007152c38912b",
      "End": "00571b5d6ce74639ad4b33bf1767b45e",
      "Id": "02b33e4fa88245149b6fb1631b7b14a1",
      "IsHidden": "False"
    },
    {
      "Start": "7c5448bb856c4b9199f76ea747bbb00a",
      "End": "426aff8c03404a8c8f74a2d6dd22d538",
      "Id": "15d7e066e08b422796f32d2920a36d23",
      "IsHidden": "False"
    },
    {
      "Start": "60a9a88fd9714a9aac82e608edc8282c",
      "End": "7175f5c74d9f4226bbe290c00bac3cf2",
      "Id": "4469fef888ab4035a1c226bfcbdb8870",
      "IsHidden": "False"
    },
    {
      "Start": "4827eb5a910b4bfdaa7f903b14ad3a77",
      "End": "0de2016e1c4548eab7c822b469f6e79e",
      "Id": "cbccf1d83a59425e961dfcf255d22a5c",
      "IsHidden": "False"
    },
    {
      "Start": "82250646dd1a42a2acdd85fea9ec0a6d",
      "End": "18d4746b23064653bbbb3d5dcd72e2b8",
      "Id": "6333a1cee2984520b6b10dce5ca199de",
      "IsHidden": "False"
    },
    {
      "Start": "82b94c308ed14c77bc6c2c00b3537b5c",
      "End": "2f0730e11a0e4b85a7573f0cddee5c62",
      "Id": "8de831779feb4b4fac5d2ed7d0e00ba6",
      "IsHidden": "False"
    },
    {
      "Start": "d142841de98e43c6a0c6da275b3fe31d",
      "End": "f7ff8117b68c4a13a14b4de4f5f8e9f8",
      "Id": "e657ee34b6f24c3eb951d8ed4f109687",
      "IsHidden": "False"
    },
    {
      "Start": "d142841de98e43c6a0c6da275b3fe31d",
      "End": "7f2bc7539d8646f6820d5bd13824d5a4",
      "Id": "7d37ebc5c9da4d7e8f65b8d9d05111f2",
      "IsHidden": "False"
    },
    {
      "Start": "f7296a3f648841ff907e43b52cb56a68",
      "End": "575443a55aba4a9c91655ec423e3b487",
      "Id": "9b88019f559c4e32b4b5f5ff3d486442",
      "IsHidden": "False"
    },
    {
      "Start": "5fab3f3c6daa4524b2dd0cef222ef467",
      "End": "79a6bcb9bfb443d4aa6c5a4060c3d845",
      "Id": "e53b9d4c66954001b75c6a0676d53a36",
      "IsHidden": "False"
    },
    {
      "Start": "5fab3f3c6daa4524b2dd0cef222ef467",
      "End": "68db538ee9474cf3bf19906d58b744ea",
      "Id": "9077bed32e0a412aa8b95f56a41c6ff9",
      "IsHidden": "False"
    },
    {
      "Start": "d661ce2badc04684992760befec74760",
      "End": "a179a33eac9141c98868a83793529cf2",
      "Id": "e20fb36ee2134ce98c9dbb3d90fbfb51",
      "IsHidden": "False"
    },
    {
      "Start": "d661ce2badc04684992760befec74760",
      "End": "65b5aa8f58794120b2b8169325eeae9c",
      "Id": "b524b3cf08bd40758c678a98a06f5da5",
      "IsHidden": "False"
    },
    {
      "Start": "d661ce2badc04684992760befec74760",
      "End": "8ca8d4ec84614230b1c71a197fdc2af9",
      "Id": "e1bfdabeb3c1423ba6cb3d7acbed25ce",
      "IsHidden": "False"
    },
    {
      "Start": "87074a7c5d5c4e3ea7c3d9bd63a5b87f",
      "End": "89f6c77ac0404fae8963a781c3cc2cba",
      "Id": "1a3c608ca6864cab9362b332de5c3120",
      "IsHidden": "False"
    },
    {
      "Start": "8d920c3fe910422fbd7cc7b58166521e",
      "End": "b459f691cadb4f519a7c13817d8b5a90",
      "Id": "0759442f81674e54ac7ec648a109efae",
      "IsHidden": "False"
    },
    {
      "Start": "8d920c3fe910422fbd7cc7b58166521e",
      "End": "9aead20d1a354fec8fa91eb7919852d9",
      "Id": "fae008b5b0b04319a9f8a518c70d99f3",
      "IsHidden": "False"
    },
    {
      "Start": "536fde84e5894962951151e4d2dbf377",
      "End": "6cbbcafbc3694170a2035e2faf0d1e2c",
      "Id": "10f7b35a03fd4d8188a4e82d178610e7",
      "IsHidden": "False"
    },
    {
      "Start": "fd73f13cf4684942997e03a49734f508",
      "End": "b42512943e4140e8ae97890a45e3ae66",
      "Id": "6e1136d6907d4b79b33892d61f3190e7",
      "IsHidden": "False"
    },
    {
      "Start": "1c6dc0518c24487db1a93662a8d080da",
      "End": "660fc04941c1446a92442bfde2ec558a",
      "Id": "032c0994b4524527b097305ffaced531",
      "IsHidden": "False"
    },
    {
      "Start": "acade79da9294711a4754fb7311b6926",
      "End": "5a6303bd33d54cb493b378a8b88c272f",
      "Id": "b4f88bfa9d3540d0b3c8a670d2f2a39b",
      "IsHidden": "False"
    },
    {
      "Start": "159d9a831a4349aaa9c1501ddc160d2f",
      "End": "b3ebeb8a61e7457c864fd2728d348f6f",
      "Id": "397a1b7471554600b91c7a297bad02af",
      "IsHidden": "False"
    },
    {
      "Start": "c50b3d5c85b0475296b7df2c8e95048c",
      "End": "dd9d32161e7b45f78466dc7c5dac7aba",
      "Id": "e336009ec01b48b9b6461d315ac23974",
      "IsHidden": "False"
    },
    {
      "Start": "0465a1d06010414bafd2a825c27267c6",
      "End": "2950f87cb26e4826b849a86a61ce9e47",
      "Id": "6dff46faf820493f95a7155fa00fec98",
      "IsHidden": "False"
    },
    {
      "Start": "40981a06dbfa4ffe96bb6ab6fec430b2",
      "End": "7978e4785abd4d58ae628ead7c27b892",
      "Id": "09a3752ffd9a4dd59f71b170c5d8eaa9",
      "IsHidden": "False"
    },
    {
      "Start": "1af59d0a7748458ea9f259f32c93eb25",
      "End": "a4c7b95321524cbd8848deb6a0eb6342",
      "Id": "9eed4f16dd77417bab91828b18cbc128",
      "IsHidden": "False"
    },
    {
      "Start": "fbff6887abd744c29170ba9e314a20a8",
      "End": "a03eaa19b57e4a85b66bb53bcfa51107",
      "Id": "d67e4c43804b43a2bde3edf600f57da8",
      "IsHidden": "False"
    },
    {
      "Start": "3eb4fecdb9594c74a1442e7ef7d17ae4",
      "End": "b5c17784cfc44bd7ad970dd619c8ad2b",
      "Id": "60e4a7a9c11c4c9caa65490b119145b9",
      "IsHidden": "False"
    },
    {
      "Start": "9946da6351474d13a5e27d838a4f200c",
      "End": "4c48d9e7c9c84383af0feb7fb430940f",
      "Id": "eca6e663bf724f85b2689f3012d928b7",
      "IsHidden": "False"
    },
    {
      "Start": "adc5817242324999ba3aeef4870ee700",
      "End": "3aafa59bcf1c4b1b99657234e06f2ab6",
      "Id": "ae3909988b5f4118833bd6bac4a5ead6",
      "IsHidden": "False"
    },
    {
      "Start": "adc5817242324999ba3aeef4870ee700",
      "End": "5bb80a0579624e3a921201db3fb85ebe",
      "Id": "d3836290e77748f598b78148b00982f9",
      "IsHidden": "False"
    },
    {
      "Start": "adc5817242324999ba3aeef4870ee700",
      "End": "ce384214813c410b8e061c79b71c47f0",
      "Id": "1a21c581661d44edace99178c66b93dc",
      "IsHidden": "False"
    },
    {
      "Start": "adc5817242324999ba3aeef4870ee700",
      "End": "3a6ee4b8900c4df1af3890d82c1b6eae",
      "Id": "2bde14e76d7e40a0ae0edd562234b25b",
      "IsHidden": "False"
    },
    {
      "Start": "8f7c3bf845894f2ba0480b0ca6d03cfb",
      "End": "e962e1ad70974982b5eaba73853d4fcb",
      "Id": "2d07856458ab4a66ab0d56e5aa5288c5",
      "IsHidden": "False"
    },
    {
      "Start": "43259ee2419e404a91d5cc2dc3087ac9",
      "End": "861c3039caf84bd589a5377eb8fd4a0d",
      "Id": "ed47468ae51740e796fe5a9e92fd6276",
      "IsHidden": "False"
    },
    {
      "Start": "43259ee2419e404a91d5cc2dc3087ac9",
      "End": "2ec95af8e272463998ab3e44ace35800",
      "Id": "ad9a4f6ec11c42a78d8e679ed6343615",
      "IsHidden": "False"
    },
    {
      "Start": "93759e87dc164bc6a7ed07f282b6d367",
      "End": "ec87de8252864dacaeea298a4996e607",
      "Id": "560bd53674124b69bbfd68b7f64bb792",
      "IsHidden": "False"
    },
    {
      "Start": "b9482e312fa14842b210bcc5f18b1cb3",
      "End": "fe0850b088f7451896fc584d4c6322c0",
      "Id": "46f843cc771a43cf97a6b2741c1fa67d",
      "IsHidden": "False"
    },
    {
      "Start": "aaa3e44a6e5e4be19383e7674c3ad428",
      "End": "04b70ca825ce4ab19fe22aa537c11457",
      "Id": "64e30b5b91324e5694ec22ac97a7665f",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [
    {
      "Name": "archi-lab.net",
      "Version": "2024.217.1024",
      "ReferenceType": "Package",
      "Nodes": [
        "a36edc0027d54db7872f515356e48bad",
        "796e3b59dcee40e6abcc5bd477225973",
        "cc8a45b2c1724d49a0cea44480d76ccb"
      ]
    }
  ],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.12",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "1.10",
      "Data": {}
    }
  ],
  "Author": "BIM Coder",
  "Linting": {
    "activeLinter": "Nenhum",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.16.2.5624",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Visualização do plano de fundo",
      "EyeX": -3588.015380859375,
      "EyeY": 1678.130615234375,
      "EyeZ": -432.6048583984375,
      "LookX": -11.762939453125,
      "LookY": -560.5177001953125,
      "LookZ": 8.566986083984375,
      "UpX": -0.79866337776184082,
      "UpY": 0.026173066347837448,
      "UpZ": 0.60120856761932373
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Document.ActiveView",
        "ShowGeometry": true,
        "Id": "9851b7861a2d40deb82828866c1b3acb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 385.88235671133748,
        "Y": 678.76278531910339
      },
      {
        "Name": "Document.Current",
        "ShowGeometry": true,
        "Id": "d39979e15470473f844dc0fb3b9aac9b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 147.61798681341975,
        "Y": 674.53245570792637
      },
      {
        "Name": "Function Apply",
        "ShowGeometry": true,
        "Id": "b3fffa959a454993b4b70b772010bf25",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1015.0560667734371,
        "Y": 384.48259813298688
      },
      {
        "Name": "Function Compose",
        "ShowGeometry": true,
        "Id": "67628969b1b3442f9b5e16ca5ad90793",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 558.79064607675491,
        "Y": 1393.903191451345
      },
      {
        "Name": "Function Apply",
        "ShowGeometry": true,
        "Id": "f2ccce1594dd471f90c5f1c65d04d893",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1771.5266750759977,
        "Y": 650.71304815809583
      },
      {
        "Name": "List.SortByKey",
        "ShowGeometry": true,
        "Id": "12b84a13acd3414b88fb109c3e650204",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2500.7774118727571,
        "Y": 1186.0477323036509
      },
      {
        "Name": "Curve.Length",
        "ShowGeometry": true,
        "Id": "de645b771c9d4ed4a5cff704453c3998",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2266.9327984409947,
        "Y": 1266.3206991307773
      },
      {
        "Name": "List.LastItem",
        "ShowGeometry": true,
        "Id": "f24c90f145d0446ab7bc5926348b7095",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2745.4915329596515,
        "Y": 1185.8388129746197
      },
      {
        "Name": "View3D by BoundingBox",
        "ShowGeometry": true,
        "Id": "df1c14291dd447659af64dccfe07f7f9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3608.5115880849335,
        "Y": 907.93964634045915
      },
      {
        "Name": "PolyCurve.ByJoinedCurves",
        "ShowGeometry": true,
        "Id": "8cda16dddc9440108b4c74be6c1937bb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2517.3900472645105,
        "Y": 663.08711868793716
      },
      {
        "Name": "BoundingBox.ByGeometry",
        "ShowGeometry": true,
        "Id": "f326af310e49495391ac482d2ae09a4a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2827.156242204695,
        "Y": 658.85740874927342
      },
      {
        "Name": "Curve.NormalAtParameter",
        "ShowGeometry": true,
        "Id": "5d97052d4bca4c2fb1b8d2482e45bb5f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3194.0813516412668,
        "Y": 1155.9710832095468
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "29e9cb2c1e024b25bbb9e28451f3638d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2999.9884517777136,
        "Y": 1292.5326601976451
      },
      {
        "Name": "Formulário inicial",
        "ShowGeometry": true,
        "Id": "9e61997dd865437cae19beecfdbf0fbe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1006.4055852162685,
        "Y": 169.41473128368219
      },
      {
        "Name": "Formulário principal",
        "ShowGeometry": true,
        "Id": "9aa1451e2ed04d3694e6d4c645a495b3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -742.87730957403346,
        "Y": 437.16998369677617
      },
      {
        "Name": "Parâmetro",
        "ShowGeometry": true,
        "Id": "960e3046a8d24ede816dd50d43a28816",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1755.8816937670522,
        "Y": 324.79012565708365
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "9cd4698b919b43f893f219e97d93d9d9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -473.91520132346977,
        "Y": 439.24159138173331
      },
      {
        "Name": "View Template - Plantas",
        "ShowGeometry": true,
        "Id": "ebcfcb906f77456681c06700216991f6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1764.2748268346384,
        "Y": 557.63500075031777
      },
      {
        "Name": "View Template - 3D",
        "ShowGeometry": true,
        "Id": "ccc9bbcf0c59488ab2d4fe40a64c02ac",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1745.761865607808,
        "Y": 708.99468513782165
      },
      {
        "Name": "Inserir VT e Renomear Vista",
        "ShowGeometry": true,
        "Id": "edf63e0919804bc8bcbde2faa164c69b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2151.0816392447568,
        "Y": 369.62293470572985
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "09957fae46ca4f7ea929bc52774f380a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4131.5398619363987,
        "Y": 706.46249680509925
      },
      {
        "Name": "List.Join",
        "ShowGeometry": true,
        "Id": "21143ab85d4d45a69901368cb18d7a99",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3945.7864276319765,
        "Y": 702.95080949800479
      },
      {
        "Name": "Boolean",
        "ShowGeometry": true,
        "Id": "6f9ecc44de8e4e578b910bf93c76268b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1242.8069686026595,
        "Y": 170.033303693759
      },
      {
        "Name": "List.OfRepeatedItem",
        "ShowGeometry": true,
        "Id": "8060968133c44bfdacf1b84774e179f0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 708.95565095696361,
        "Y": 551.68934940426163
      },
      {
        "Name": "List.Count",
        "ShowGeometry": true,
        "Id": "9b798e4b06f34589b91c579bba262385",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 484.75788015179023,
        "Y": 517.07621438683907
      },
      {
        "Name": "Verificar se o parâmetro existe",
        "ShowGeometry": true,
        "Id": "039f23d72ccd4d0cb37a697c4ce8225a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -698.571913810861,
        "Y": 176.54460876621533
      },
      {
        "Name": "Obtém as linhas da FilledRegion",
        "ShowGeometry": true,
        "Id": "b93238d9a6444d0d82a68d4cbcbb8d59",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 207.80685972597792,
        "Y": 1044.9933272939033
      },
      {
        "Name": "Views.SetCropBoxByCurves",
        "ShowGeometry": true,
        "Id": "a36edc0027d54db7872f515356e48bad",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 603.81838301161974,
        "Y": 1135.337928234225
      },
      {
        "Name": "Views.Duplicate",
        "ShowGeometry": true,
        "Id": "796e3b59dcee40e6abcc5bd477225973",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 480.38880840122533,
        "Y": 323.79964104609979
      },
      {
        "Name": "IF",
        "ShowGeometry": true,
        "Id": "5de8d57200fd46fb911bd47727db2de4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1525.1006992992584,
        "Y": 821.03682209426756
      },
      {
        "Name": "Views.CropBoxVisible",
        "ShowGeometry": true,
        "Id": "cc8a45b2c1724d49a0cea44480d76ccb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 642.40852628883169,
        "Y": 965.46293072436606
      },
      {
        "Name": "Function Compose",
        "ShowGeometry": true,
        "Id": "324b5a90c2f64d4d9f82e339d92b675c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1007.4636049341098,
        "Y": 1028.48829197033
      },
      {
        "Name": "Verificar se o pacote foi instalado",
        "ShowGeometry": true,
        "Id": "06918f38a6a34425be9f1ee32b7ff0a7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 731.37733396859812,
        "Y": 71.932459756325443
      }
    ],
    "Annotations": [
      {
        "Id": "959288ddc4f740778f1d87d5faa155d1",
        "Title": "Duplicar a Vista",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "9851b7861a2d40deb82828866c1b3acb",
          "d39979e15470473f844dc0fb3b9aac9b",
          "b3fffa959a454993b4b70b772010bf25",
          "9b798e4b06f34589b91c579bba262385",
          "8060968133c44bfdacf1b84774e179f0",
          "796e3b59dcee40e6abcc5bd477225973"
        ],
        "HasNestedGroups": false,
        "Left": 137.61798681341975,
        "Top": 264.79964104609979,
        "Width": 1092.4380799600174,
        "Height": 545.96314427300354,
        "FontSize": 24.0,
        "InitialTop": 323.79964104609979,
        "InitialHeight": 499.96314427300359,
        "TextblockHeight": 49.0,
        "Background": "#FF0DFFFF"
      },
      {
        "Id": "ecfe52f69d414f3cb64957c32aed0dc9",
        "Title": "Função vazia",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "67628969b1b3442f9b5e16ca5ad90793"
        ],
        "HasNestedGroups": false,
        "Left": 548.79064607675491,
        "Top": 1334.903191451345,
        "Width": 232.0,
        "Height": 221.0,
        "FontSize": 24.0,
        "InitialTop": 1393.903191451345,
        "InitialHeight": 145.0,
        "TextblockHeight": 49.0,
        "Background": "#FFCFCFCF"
      },
      {
        "Id": "f2754ec6907e49769d3883191c539312",
        "Title": "Aplicar funções - Criar planta de piso",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "f2ccce1594dd471f90c5f1c65d04d893",
          "5de8d57200fd46fb911bd47727db2de4"
        ],
        "HasNestedGroups": false,
        "Left": 1515.1006992992584,
        "Top": 591.71304815809583,
        "Width": 471.42597577673928,
        "Height": 426.32377393617173,
        "FontSize": 24.0,
        "InitialTop": 650.71304815809583,
        "InitialHeight": 262.91864597677738,
        "TextblockHeight": 49.0,
        "Background": "#FFCFCFCF"
      },
      {
        "Id": "2a961dce48fb451eb7490114fc9f1509",
        "Title": "Obter a BoundingBox da FilledRegion",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "8cda16dddc9440108b4c74be6c1937bb",
          "f326af310e49495391ac482d2ae09a4a"
        ],
        "HasNestedGroups": false,
        "Left": 2507.3900472645105,
        "Top": 599.85740874927342,
        "Width": 598.7661949401845,
        "Height": 295.22970993866375,
        "FontSize": 24.0,
        "InitialTop": 658.85740874927342,
        "InitialHeight": 149.22970993866375,
        "TextblockHeight": 49.0,
        "Background": "#FF10E566"
      },
      {
        "Id": "5d910834eb53478baa1d9ffc150592e1",
        "Title": "Obter a linha da FilledRegion de maior comprimento",
        "DescriptionText": "",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "12b84a13acd3414b88fb109c3e650204",
          "de645b771c9d4ed4a5cff704453c3998",
          "f24c90f145d0446ab7bc5926348b7095"
        ],
        "HasNestedGroups": false,
        "Left": 2256.9327984409947,
        "Top": 1126.8388129746197,
        "Width": 674.55873451865682,
        "Height": 271.48188615615754,
        "FontSize": 24.0,
        "InitialTop": 1185.8388129746197,
        "InitialHeight": 225.48188615615754,
        "TextblockHeight": 49.0,
        "Background": "#FF10E566"
      },
      {
        "Id": "e7fb5bb2e10d40aaaffd501629b7f825",
        "Title": "Normal da linha de maior comprimento",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "5d97052d4bca4c2fb1b8d2482e45bb5f",
          "29e9cb2c1e024b25bbb9e28451f3638d"
        ],
        "HasNestedGroups": false,
        "Left": 2989.9884517777136,
        "Top": 1096.9710832095468,
        "Width": 482.09289986355316,
        "Height": 327.5615769880983,
        "FontSize": 24.0,
        "InitialTop": 1155.9710832095468,
        "InitialHeight": 281.5615769880983,
        "TextblockHeight": 49.0,
        "Background": "#FF10E566"
      },
      {
        "Id": "a4bfea40425d4fcabed1e11b4cc4d04b",
        "Title": "Criar a Vista 3D",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "df1c14291dd447659af64dccfe07f7f9"
        ],
        "HasNestedGroups": false,
        "Left": 3598.5115880849335,
        "Top": 848.93964634045915,
        "Width": 275.0,
        "Height": 361.0,
        "FontSize": 24.0,
        "InitialTop": 907.93964634045915,
        "InitialHeight": 145.0,
        "TextblockHeight": 49.0,
        "Background": "#FF0DFFFF"
      },
      {
        "Id": "f65852c6d29b41239ad22965d0fbc3b5",
        "Title": "Output",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "09957fae46ca4f7ea929bc52774f380a",
          "21143ab85d4d45a69901368cb18d7a99"
        ],
        "HasNestedGroups": false,
        "Left": 3935.7864276319765,
        "Top": 643.95080949800479,
        "Width": 379.75343430442217,
        "Height": 221.0,
        "FontSize": 24.0,
        "InitialTop": 702.95080949800479,
        "InitialHeight": 148.51168730709446,
        "TextblockHeight": 49.0,
        "Background": "#FFFF931E"
      },
      {
        "Id": "d88e221501d64a9ea12c1f37c5eeeea8",
        "Title": "Modificações na Vista -> CropBox, Nome e View Template",
        "DescriptionText": "",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "a36edc0027d54db7872f515356e48bad",
          "b93238d9a6444d0d82a68d4cbcbb8d59",
          "cc8a45b2c1724d49a0cea44480d76ccb",
          "324b5a90c2f64d4d9f82e339d92b675c"
        ],
        "HasNestedGroups": false,
        "Left": 197.80685972597792,
        "Top": 906.46293072436606,
        "Width": 1031.6567452081317,
        "Height": 390.874997509859,
        "FontSize": 24.0,
        "InitialTop": 965.46293072436606,
        "InitialHeight": 150.85470076089007,
        "TextblockHeight": 49.0,
        "Background": "#FF0DFFFF"
      },
      {
        "Id": "5054fbbc0f6c4fceab872f67d0bc1607",
        "Title": "CAMPOS PERSONALIZÁVEIS",
        "DescriptionText": "Nomes dos View Templates principais",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "ebcfcb906f77456681c06700216991f6",
          "ccc9bbcf0c59488ab2d4fe40a64c02ac",
          "593258f2275c45f685791202219dbc40"
        ],
        "HasNestedGroups": false,
        "Left": -2101.728475022252,
        "Top": 498.63500075031777,
        "Width": 600.45364818761368,
        "Height": 342.35968438750388,
        "FontSize": 24.0,
        "InitialTop": 557.63500075031777,
        "InitialHeight": 296.35968438750388,
        "TextblockHeight": 49.0,
        "Background": "#FFFF931E"
      },
      {
        "Id": "f1a121af2fd74e01a470f27ad756edb7",
        "Title": "CAMPOS PERSONALIZÁVEIS",
        "DescriptionText": "Parâmetro do número de detalhe",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "960e3046a8d24ede816dd50d43a28816",
          "bd0dde940c6445a785a050a911de95de"
        ],
        "HasNestedGroups": false,
        "Left": -2075.678245602614,
        "Top": 265.79012565708365,
        "Width": 546.79655183556179,
        "Height": 191.0,
        "FontSize": 24.0,
        "InitialTop": 324.79012565708365,
        "InitialHeight": 174.86021144452053,
        "TextblockHeight": 49.0,
        "Background": "#FFFF931E"
      },
      {
        "Id": "593258f2275c45f685791202219dbc40",
        "Title": "Altere estes campos caso o nome dos templates principais sejam alterados. \n\nDesta forma, eles sempres aparecerão em primeiro na lista de templates.",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [],
        "HasNestedGroups": false,
        "Left": -2091.728475022252,
        "Top": 651.41360867832236,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "bd0dde940c6445a785a050a911de95de",
        "Title": "Altere este campo caso o nome do parâmetro da região seja alterado.",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [],
        "HasNestedGroups": false,
        "Left": -2065.678245602614,
        "Top": 362.65033710160418,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": -300.54478668014895,
    "Y": 281.12428951805333,
    "Zoom": 0.91405430120973863
  }
}